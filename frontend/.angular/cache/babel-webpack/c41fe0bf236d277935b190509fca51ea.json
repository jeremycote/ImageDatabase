{"ast":null,"code":"import { throwError, catchError } from 'rxjs';\nimport { API_URL } from '../env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ImageEntityApiService = /*#__PURE__*/(() => {\n  class ImageEntityApiService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    handleError(error) {\n      //throwError instead of Observable.throw\n      return throwError(error.error.message || \"Server Error\");\n    }\n\n    // GET list of public, future events\n    getImageEntities() {\n      console.log(\"getting image entities\");\n      return this.http.get(`${API_URL}/images`).pipe(catchError(this.handleError));\n    }\n\n    getImageEntitiesLike(image, accuracy, max) {\n      console.log(\"getting image entities like \" + image.filename + \" using id \" + image.id);\n      return this.http.get(`${API_URL}/similar_to/` + image.id + \"/\" + accuracy + \"/\" + max).pipe(catchError(this.handleError));\n    }\n\n    searchImageEntities(query, category) {\n      console.log(\"searching image entities for \" + query);\n      return this.http.get(`${API_URL}/search/` + category + \"/\" + query).pipe(catchError(this.handleError));\n    }\n\n  }\n\n  ImageEntityApiService.ɵfac = function ImageEntityApiService_Factory(t) {\n    return new (t || ImageEntityApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ImageEntityApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageEntityApiService,\n    factory: ImageEntityApiService.ɵfac\n  });\n  return ImageEntityApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}